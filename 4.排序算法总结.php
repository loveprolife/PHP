<?php


/**
 * 冒泡排序 
 * 
 * 算法原理
 * 冒泡排序算法的运作如下：（从后往前）
 * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。
 * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。
 * 针对所有的元素重复以上的步骤，除了最后一个。
 * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。
 * 
 * 时间复杂度
 * 若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次
 * 数C和记录移动次数M均达到最小值：C=n-1，M=0。
 * 所以，冒泡排序最好的时间复杂度为O(n)。
 * 初始文件是反序的，需要进行n-1趟排序。每趟排序要进行n-i次关键字的
 * 比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在
 * 这种情况下，比较和移动次数均达到最大值：C=(n*(n-1))/2=O(n^2)，M=(3(n*(n-1)))/2=O(n^2);
 * 冒泡排序的最坏时间复杂度为O(n^2)。
 * 综上，因此冒泡排序总的平均时间复杂度为O(n^2)。
 * 
 * 算法稳定性
 * 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如 * 果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把 * 两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。
 * 
 * @param  [type] $num [description]
 * @return [type]      [description]
 */
function bubbleSort($num){
	for ($i=0; $i < count($num); $i++) { 
		for ($j=0; $j < count($num) - $i - 1; $j++) { 
			if($num[$j] > $num[$j+1]){
				$temp = $num[$j];
				$num[$j] = $num[$j+1];
				$num[$j+1] = $temp;
			}
		}
	}
	return $num;
}

print_r(bubbleSort([12, 54345, 22, 657346, 542, 547456, 23424, 17]));
exit();
















/**
 * 直接插入排序
 *
 * 时间复杂度    平均情况：O(n^2)     最好情况：O(n)   最坏情况：O(n^2)
 * 空间复杂度(辅助存储)      O(1)
 * 稳定性      稳定
 *
 * 排序方法
 * 1．简单方法
 * 首先在当前有序区R[1..i-1]中查找R[i]的正确插入位置k(1≤k≤i-1)；然后将R[k．．i-1]中的记录均后移一个位置，腾出k位置上的空间插入R[i]。
 * 注意：若R[i]的关键字大于等于R[1．．i-1]中所有记录的关键字，则R[i]就是插入原位置。
 * 2．改进的方法
 * 一种查找比较操作和记录移动操作交替地进行的方法。具体做法：
 * 将待插入记录R[i]的关键字从右向左依次与有序区中记录R[j](j=i-1，i-2，…，1)的关键字进行比较：
 * ① 若R[j]的关键字大于R[i]的关键字，则将R[j]后移一个位置；
 * ②若R[j]的关键字小于或等于R[i]的关键字，则查找过程结束，j+1即为R[i]的插入位置。
 * 关键字比R[i]的关键字大的记录均已后移，所以j+1的位置已经腾空，只要将R[i]直接插入此位置即可完成一趟直接插入排序。
 *
 * 算法中引进的附加记录R[0]称监视哨或哨兵(Sentinel)。
 * 哨兵有两个作用：
 * ① 进人查找(插入位置)循环之前，它保存了R[i]的副本，使不致于因记录后移而丢失R[i]的内容；
 * ② 它的主要作用是：在查找循环中"监视"下标变量j是否越界。一旦越界(即j=0)，因为R[0].可以和自己比较，循环判定条件不成立使得查找循环结束，从而避免了在该循环内的每一次均要检测j是否越界(即省略了循环 * 判定条件"j>=1")。
 * 注意：
 * ① 实际上，一切为简化边界条件而引入的附加结点(元素)均可称为哨兵。
 * 【例】单链表中的头结点实际上是一个哨兵
 * ② 引入哨兵后使得测试查找循环条件的时间大约减少了一半，所以对于记录数较大的文件节约的时间就相当可观。对于类似于排序这样使用频率非常高的算法，要尽可能地减少其运行时间。所以不能把上述算法中的哨 * 兵视为雕虫小技，而应该深刻理解并掌握这种技巧。
 * @param $arr
 * @return mixed
 */
function insertSort($arr){
    for ($i = 1; $i < count($arr); $i++) {
        $temp = $arr[$i];
        for ($j = $i - 1; $j >= 0 && $arr[$j] > $temp; $j--) {
            $arr[$j+1] = $arr[$j];
        }
        $arr[$j+1] = $temp;
    }
    return $arr;
}

echo '<pre>';
print_r([4523, 2523, 5, 657, 12, 657235236, 5474, 65235, 53, 234235, 75]);
print_r(insertSort([4523, 2523, 5, 657, 12, 657235236, 5474, 65235, 53, 234235, 75]));
echo '</pre>';
exit();






?>
